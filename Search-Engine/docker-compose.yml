version: '3'
#docker-compose -f ./docker-compose.yml up or docker-compose up
name: search-engine
services:
  
  # fluentd:
  #   build: ./fluentd
  #   volumes:
  #     - ./fluentd/conf:/fluentd/etc
  #   links:
  #     - "elasticsearch"
  #   ports:
  #     - "24224:24224"
  #     - "24224:24224/udp"
      
  cerebro:
    image: lmenezes/cerebro:0.9.4
    ports:
      - "9009:9000"
    volumes:
      - ./monitoring/cerebro/application.conf://opt/cerebro/conf/application.conf
      
  
  # docker run --name kibaba-run --network bridge -e "ELASTICSEARCH_URL=http://host.docker.internal:9209" -e "ES_JAVA_OPTS=-Xms1g -Xmx1g" -e "ELASTICSEARCH_HOSTS=http://host.docker.internal:9209" -p 5801:5601 docker.elastic.co/kibana/kibana:8.8.0
  # docker run --name es8-run --network bridge -p 9209:9200 -p 9114:9114 -p 9309:9300 -e "http.cors.enabled=true" -e "http.cors.allow-origin=\"*\"" -e "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization" -e "http.cors.allow-credentials=true" -e "xpack.security.enabled=false" -e "discovery.type=single-node" -e "ES_JAVA_OPTS=-Xms2g -Xmx2g" docker.elastic.co/elasticsearch/elasticsearch:8.8.0
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html
  elasticsearch_v_8_12:
    # image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    build:
      context: ./Docker/elasticsearch
      dockerfile: Dockerfile
    container_name: es-node_v8_12
    environment:
      - http.host=0.0.0.0
      # - transport.host=127.0.0.1
      - node.name=es01
      # - node.master=true
      # - node.data=true
      - node.roles=[data, master]
      - cluster.name=es-monitoring-cluster
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      # - discovery.type=single-node
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - xpack.security.enabled=false    
      # - bootstrap.system_call_filter=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata0:/usr/share/elasticsearch/data
      # - ${PROJECTS_DIR}/python-platform-engine/Search-Engine/Docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./Docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - 9202:9200
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://localhost:9200/_cat/health"]
    networks:
      - bridge
  
  kibana_v_8_12:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: kibana_v_8_12
    ports:
      - 15601:5601
    networks:
      - bridge
    depends_on:
      - elasticsearch_v_8_12
    environment:
      ELASTICSEARCH_HOSTS: http://es-node_v8_12:9200
    
  
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    privileged: true
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/alertmanager.yml
      - ./monitoring/alertmanager/slack.tmpl:/slack.tmpl
    command:
      - '--config.file=/alertmanager.yml'
      - "--web.external-url=http://localhost:9093"
    ports:
      - 9093:9093
      
  # docker run --rm -d -p 9090:9090 -v ./prometheus.yml:/etc/prometheus/prometheus.yml ./prometheus:/prometheus    
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9091:9090
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
      - ./monitoring/alertmanager/alert_rules.yml:/alertmanager/alert_rules.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=2d # 90일보다 오래된 metrics는 삭제
      - --storage.tsdb.retention.size=1GB # 10GB를 넘을 시 오래된 metrics 삭제
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/proemtheus/consoles
      - --web.enable-admin-api
    networks:
      - bridge
  
  elastichq:
    image: elastichq/elasticsearch-hq
    container_name: elastichq
    environment:
      - HQ_DEFAULT_URL=http://host.docker.internal:9209
      # - HQ_DEBUG=True
      # - HQ_ENABLE_SSL=True
      # - HQ_VERIFY_CERTS=False
      # - HQ_CA_CERTS=/usr/local/share/ca-certificates/MYCA.crt
    ports:
      - 5500:5000
    networks:
      - bridge
    
  grafana:
    container_name: grafana-local
    environment:
      - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app
      - GF_RENDERING_SERVER_URL=http://host.docker.internal:8088/render
      - GF_RENDERING_CALLBACK_URL=http://host.docker.internal:3001/
      - GF_LOG_FILTERS= rendering:debug
    image: grafana/grafana:latest
    ports:
      - 3000:3000/tcp
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    networks:
      - bridge
      
  renderer:
    image: grafana/grafana-image-renderer
    restart: always
    ports:
      - 8088:8081
    networks:
      - bridge
      
  # Single Cluster
  single_node_v_8_12:
    #image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    build:
      context: ./Docker/elasticsearch
      dockerfile: Dockerfile
    container_name: single_node_v_8_12
    environment:
      - node.name=es01
      #  - node.master=true
      #  - node.data=true
      - node.roles=[data, master]
      - cluster.name=es-monitoring-a-cluster
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      # - discovery.type=single-node
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - xpack.security.enabled=false    
      # - bootstrap.system_call_filter=false
      - reindex.remote.whitelist=${NODE_WHITE_LIST}
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data04:/usr/share/elasticsearch/data
    ports:
      - 9220:9200
    networks:
      - bridge
      
  single_node_kibana_v_8_12:
    image: docker.elastic.co/kibana/kibana:8.12.0
    depends_on: {"single_node_v_8_12": {"condition": "service_healthy"}}
    restart: unless-stopped
    ports:
      - 25601:5601
    networks:
      - bridge
    environment:
      ELASTICSEARCH_HOSTS: http://single_node_v_8_12:9200
          
  # docker-compose -f ./create-certs.yml run --rm create_certs
  # docker-compose up -d
  # Multiple Cluster
  es01:
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: es01
    build:
      context: ./Docker/elasticsearch
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - node.name=es01
      - node.master=true
      - node.data=true
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      # - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD 
      # - xpack.license.self_generated.type=trial 
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false 
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true 
      - xpack.security.transport.ssl.verification_mode=certificate 
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
      - certs:$CERTS_DIR
    ports:
      - 9200:9200
    networks:
      - bridge

    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  es02:
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    build:
      context: ./Docker/elasticsearch
      dockerfile: Dockerfile
    container_name: es02
    restart: unless-stopped
    environment:
      - node.name=es02
      - node.master=true
      - node.data=true
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      # - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      # - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.http.ssl.key=$CERTS_DIR/es02/es02.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es02/es02.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
      - certs:$CERTS_DIR
    ports:
      - 9210:9200
    networks:
      - bridge

  es03:
    # image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    build:
      context: ./Docker/elasticsearch
      dockerfile: Dockerfile
    container_name: es03
    restart: unless-stopped
    environment:
      - node.name=es03
      - node.master=true
      - node.data=true
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      # - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      # - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.http.ssl.key=$CERTS_DIR/es03/es03.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es03/es03.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es03/es03.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
      - certs:$CERTS_DIR
    networks:
      - bridge

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kibana
    depends_on: {"es01": {"condition": "service_healthy"}}
    restart: unless-stopped
    ports:
      - 5601:5601
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: gsaadmin
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt
      # SERVER_SSL_ENABLED: "true"
      # SERVER_SSL_KEY: $CERTS_DIR/kibana/kib01.key
      # SERVER_SSL_CERTIFICATE: $CERTS_DIR/kibana/kib01.crt
    volumes:
      - certs:$CERTS_DIR
    networks:
      - bridge
  
  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_master_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - 9250:9200
      - 9600:9600 # required for Performance Analyzer
    networks:
      - bridge
      
  opensearch-node2:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_master_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - bridge
      
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - 5901:5601
    expose:
      - "5901"
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9250","https://opensearch-node2:9250"]'
    networks:
      - bridge
          
  
  # docker run -d -v "$PWD/solrdata:/var/solr" -p 8983:8983 --name solr-engine solr solr-precreate gettingstarted 
  # /opt/solr-9.3.0/contrib/prometheus-exporter/bin/solr-exporter -p 9854 -b http://host.docker.internal:8983/solr -f /opt/solr-9.3.0/contrib/prometheus-exporter/conf/solr-exporter-config.xml   
  # solr@31172ca1ef75:/opt/solr-9.3.0$ /opt/solr-9.3.0/contrib/prometheus-exporter/bin/solr-exporter -p 9854 -b http://host.docker.internal:8983/solr -f /opt/solr-9.3.0/contrib/prometheus-exporter/conf/solr-exporter-config.xml &
  solr:
    image: solr
    container_name: solr-engine
    ports:
     - "8983:8983"
     - "9854:9854"
    environment:
    #  - ZK_HOST=zoo1:2181,zoo2:2181,zoo3:2181
     - ZK_HOST=host.docker.internal:2181
    networks:
      - bridge 
    volumes:
      - data01:/var/solr
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - mycore
      - "/opt/solr-9.3.0/contrib/prometheus-exporter/bin/solr-exporter"
      - "-p"
      - "9854"
      - "-b"
      - "http://host.docker.internal:8983/solr"
      - "-f"
      - "/opt/solr-9.3.0/contrib/prometheus-exporter/conf/solr-exporter-config.xml"
    depends_on:
      - zoo1
   
  zoo1:
    image: zookeeper:3.6.2
    container_name: zoo-keeper-1
    # restart: always
    hostname: zoo1
    ports:
      - 2181:2181
      - 7010:7000
    environment:
      ZOO_MY_ID: 1
      # ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
    networks:
      - bridge

  # solr2:
  #   image: solr
  #   container_name: solr2
  #   ports:
  #    - "8982:8983"
  #   environment:
  #     - ZK_HOST=zoo1:2181,zoo2:2181,zoo3:2181
  #   networks:
  #     - solr
  #   depends_on:
  #     - zoo1
  #     - zoo2
  #     - zoo3
 

volumes:
  opensearch-data1:
    driver: local
  opensearch-data2:
    driver: local
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
  data04:
    driver: local
  esdata0:
    driver: local
  kibanadata:
    driver: local
  certs:
    driver: local
    
networks:
  bridge:
    driver: bridge