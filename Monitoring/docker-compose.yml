version: '3'
#docker-compose -f ./docker-compose.yml up or docker-compose up
# name: python-rest-api-search-engine
name: local_infrastructure
services:
#  http://localhost:8000/Chart/Chartjs/Chart.html
#  docker cp /Users/euiyoung.hwang/ES/Python_Workspace/users_data/data.csv tomcat:/usr/local/tomcat/webapps/Chart/Chartjs/
  tomcat:
    image: tomcat:8.5-jre8
    ports:
      - "8000:8080"
    container_name: tomcat
    volumes:
      - ./logs/:/usr/local/tomcat/logs/
    networks:
      - bridge
    restart: unless-stopped

  cerebro:
    image: lmenezes/cerebro:0.9.4
    ports:
      - "9500:9000"
 
  # http://localhost:8983/solr
  # /opt/solr-9.3.0/contrib/prometheus-exporter/bin/solr-exporter -p 9854 -b http://host.docker.internal:8983/solr -f /opt/solr-9.3.0/contrib/prometheus-exporter/conf/solr-exporter-config.xml
  solr-exporter:
    image: solr:9.3.0
    ports:
     - "9854:9854"
    entrypoint:
      - "/opt/solr-9.3.0/contrib/prometheus-exporter/bin/solr-exporter"
      - "-p"
      - "9854"
      - "-b"
      - "http://host.docker.internal:8983/solr"
      - "-f"
      - "/opt/solr-9.3.0/contrib/prometheus-exporter/conf/solr-exporter-config.xml"
      # - "-n"
      # - "8"
      
  # docker run -d --name rabbitmq-local --network bridge --hostname rabbitmqhost --name rabbitmq -p 9419:9419 -p 15672:15672 -p 5672:5672 rabbitmq:3-management
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-local
    hostname: rabbitmq
    network_mode: bridge
    ports:
      - "15672:15672"
      - "5672:5672"
      - "9419:9419"
      
  rabbitmq-exporter:
    # depends_on:
    #   - rabbitmq
    image: kbudde/rabbitmq-exporter
    container_name: rabbitmq-exporter
    # network_mode: service:rabbitmq
  
  minecraft:
    image: itzg/minecraft-server
    stdin_open: true
    tty: true
    restart: unless-stopped
    ports:
      - 25565:25565 # minecraft
      - 9225:9225 # minecraft-exporter
    volumes:
      - ./minecraft:/data
    environment:
      - EULA=true
      - TYPE=PAPER
      - SPIGET_RESOURCES=36618 # prometheus-exporter plugin
  
  elasticsearch_exporter:
    # http://localhost:9200/_prometheus/metrics
    # http://localhost:9210/_prometheus/metrics
    image: justwatch/elasticsearch_exporter:1.1.0
    container_name: elasticsearch_exporter
    depends_on:
      - prometheus
    command:
     - '--es.uri=http://elastic:gsaadmin@host.docker.internal:9200'
     - '--es.all'
     - '--es.snapshots'
     - '--es.indices'
    restart: always
    ports:
    - "9115:9114"
    
  # docker run --rm -p 9100:9100 prom/node-exporter 
  # docker compose up -d node-exporter
  # https://github.com/prometheus/node_exporter/
  node_exporter:
    # http://localhost:9100/metrics
    image: prom/node-exporter
    container_name: node_exporter
    depends_on:
      - prometheus
    restart: always
    ports:
      - 9100:9100
    
  # docker run --name postgres-local -e POSTGRES_PASSWORD=1234 -p 15432:5432 -d postgres  
  postgres:
    image: postgres:12
    ports:
      - 5432:5432
    volumes:
      - ./backup:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: postgres
    networks:
      - bridge
      
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:1234@host.docker.internal:15432/postgres?sslmode=disable"
    links:
      # - postgres
      - prometheus
    networks:
      - bridge
  
  
  # docker run --rm -d -p 9090:9090 -v ./prometheus.yml:/etc/prometheus/prometheus.yml ./prometheus:/prometheus    
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9091:9090
    volumes:
      # - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./Prometheus/:/prometheus
      # - ./alertmanager/alert.rules:/alertmanager/alert.rules
      - ./Alertmanager/alert_rules.yml:/alertmanager/alert_rules.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=2d # 90일보다 오래된 metrics는 삭제
      - --storage.tsdb.retention.size=1GB # 10GB를 넘을 시 오래된 metrics 삭제
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/proemtheus/consoles
      - --web.enable-admin-api
    networks:
      - bridge
    # network_mode: "host"
    
  
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    privileged: true
    volumes:
      - ./Alertmanager/alertmanager.yml:/alertmanager.yml
      - ./Alertmanager/slack.tmpl:/slack.tmpl
    command:
      - '--config.file=/alertmanager.yml'
      - "--web.external-url=http://localhost:9093"
    ports:
      - 9093:9093

  grafana:
    container_name: grafana-local
    environment:
      - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app
      - GF_RENDERING_SERVER_URL=http://host.docker.internal:8088/render
      - GF_RENDERING_CALLBACK_URL=http://host.docker.internal:3001/
      - GF_LOG_FILTERS= rendering:debug
    image: grafana/grafana:latest
    ports:
      - 3000:3000/tcp
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    networks:
      - bridge
      
  renderer:
    image: grafana/grafana-image-renderer
    restart: always
    ports:
      - 8088:8081
    networks:
      - bridge

volumes:
  data01:
    driver: local
networks:
  bridge:
    driver: bridge