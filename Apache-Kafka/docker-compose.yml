version: '2'
#docker-compose -f ./docker-compose.yml up or docker-compose up or docker-compose up -d
name: kafka-cluster

# https://github.com/mtpatter/postgres-kafka-demo/blob/master/docker-compose.yml
# docker exec -it kafka-cluster-kafka-1-1 kafka-topics --bootstrap-server=localhost:9092 --create --topic test-topic --partitions 3 --replication-factor 1
services:

  # postgres:
  #   image: debezium/postgres:11
  #   container_name: postgres
  #   environment:
  #     POSTGRES_PASSWORD: postgres
  #   command: postgres -c config_file=/home/config/postgresql.conf
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     -./:/home/config
  postgres:
    image: postgres
    # container_name: postgres-local
    hostname: postgres
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ./backup:/var/lib/postgresql/data
      # - ~/apps/postgres:/var/lib/postgresql/data
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    environment:
      POSTGRES_PASSWORD: 1234
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    networks:
      - bridge
      

  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - bridge

  # zookeeper-2:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 32181:2181
  
  connect-ui:
    image: landoop/kafka-connect-ui
    container_name: connect-ui
    depends_on:
      - kafka-connect
    ports:
      - 8100:8000
    networks:
      - bridge
    environment:
      - "CONNECT_URL=http://kafka-connect:8083"


  Kafka-Connect-UI:
    image: landoop/kafka-connect-ui
    container_name: connect-ui
    depends_on:
      - kafka-connect
    ports:
      - 8101:8000
    networks:
      - bridge
    environment:
      - "CONNECT_URL=http://192.168.1.243:8083"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:3.3.0
    hostname: connect
    container_name: kafka-connect
    depends_on:
      - zookeeper-1
      - kafka-1
      - kafka-2
      # - postgres
      # - schema_registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-1:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:28081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:28081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
    volumes:
      - ./kafka-connect:/etc/kafka-connect/jars
    networks:
      - bridge

  kafka-1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
      # - zookeeper-2
    ports:
      - 29092:9092
    networks:
      - bridge
    environment:
      KAFKA_BROKER_ID: 1
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
   
  kafka-2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
      # - zookeeper-2
    ports:
      - 39092:9092
    networks:
      - bridge
    environment:
      KAFKA_BROKER_ID: 2
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
 

  schema-registry:
    image: confluentinc/cp-schema-registry:3.2.0
    depends_on:
      - kafka-1
      - kafka-2      
    ports: 
      - 28081:28081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper-1:2181'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:28081
    restart: always
    networks:
      - bridge
    
    
  kafka-monitoring:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9009:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka-1:9092"
      # KAFKA_BROKERCONNECT: "kafka1:9092, kafka2:9092, kafka3:9092"
      # JVM_OPTS: "-Xms64M -Xmx128M"
    depends_on:
      - kafka-1
      - kafka-2
    networks:
      - bridge


  # http://localhost:9308/metrics    
  kafka-exporter:
    image: danielqsj/kafka-exporter 
    command: ["--kafka.server=kafka-1:9092", "--kafka.server=kafka-2:9092"]
    depends_on:
      - kafka-1
      - kafka-2
    ports:
      - 9308:9308
    networks:
      - bridge
      
  kafka-jmx:
    image: rdsea/kafka-jmx-prometheus:latest
    ports:
      - 9092:9092
      - 7071
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_OPTS: -javaagent:/usr/app/jmx_prometheus_javaagent.jar=7071:/usr/app/prom-jmx-agent-config.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bridge
      
      
networks:
  bridge:
    driver: bridge